
use coro

global local_gc : GcLocal (@undefined)

global stack_main : Stack (@undefined)
global stack_active : Stack (@undefined)
global stack_items : Bump (@undefined)
global disable_colors : Bump (@undefined)
global return_colors : Bump (@undefined)
global still_used : Bump (@undefined)
global blanks : Bump (@undefined)

global mem_new : uint
global mem_trigger : uint
global mem_suggestion : uint
global mem_marked : uint
global mem_marked_last : uint

value mem_minimum_trigger (8192)

value FROZEN (255)

+ fn run_now() {
    local_gc.run()
}

+ fn run_if_threshold_reached() {
    if mem_new > mem_trigger || local_gc.update_shared {
        local_gc.run()
    }
}

+ fn run_suggestion() {
    if mem_new > mem_suggestion || local_gc.update_shared {
        local_gc.run()
    }
}
+ fn shutdown() {
    local_gc.shutdown()
}

fn thread_init() {
    stack_main = Stack.new()
    stack_active = stack_main
    pools_init()
}

struct GcLocal {
    globals: Bump (Bump.new())
    update_shared: bool (false)
    shared_mark_applied: u8 (0)
    disable: bool (false)

    + static fn init() GcLocal {

        stack_items = Bump.new()
        disable_colors = Bump.new()
        return_colors = Bump.new()
        still_used = Bump.new()
        if blanks == null @as Bump : blanks = Bump.new()

        Color.init()

        mem_new = 0
        mem_trigger = mem_minimum_trigger
        mem_suggestion = mem_minimum_trigger

        let gcl = GcLocal {
        }
        local_gc = gcl

        return gcl
    }

    fn add_global(ref: ptr) {
        let adr = this.globals.get(sizeof(ptr))
        @ptrv(adr, ptr) = ref
    }

    fn push_to_shared() {
        shared_gc.add_gc(this)
    }

    fn run() {

        if this.disable : return
        this.disable = true

        // this.lock.lock()
        // print("-")
        // print("-----------------------------\n")

        let s_mark = shared_mark

        // Mark used
        this.loop_stack_items(SELF.mark_item_used)

        let increase = (mem_marked * 100) / (mem_marked_last + 1)
        let trace = increase > 110

        if trace {
            // Check if items have dissapeared from the stack
            this.check_previous_stack_items()

            // Make sure share color is valid
            @ptrv(color_state, u8, color_shared) = color_state_used

            // Give stack items a color
            this.loop_stack_items(SELF.mark_item_color)

            // Check if objects are still used
            this.check_still_used()

            // Disable colors that had conflicts
            this.check_disable_colors()
            disable_colors.reset()
            this.check_return_colors()
            return_colors.reset()

            //
            mem_marked_last = mem_marked
        }

        // Call un-used item free hooks
        this.check_blanks()
        blanks.reset()

        // Reset pools
        reset_pools()

        // Update gc trigger point
        mem_trigger = mem_marked / 100 * 145 + mem_minimum_trigger
        mem_suggestion = mem_marked / 100 * 110 + mem_minimum_trigger
        mem_new = mem_marked

        // Mark shared
        if this.update_shared && s_mark == shared_mark {
            this.update_shared = false
            this.shared_mark_applied = s_mark
        }

        this.disable = false
        // this.lock.unlock()
        // print(".")
    }

    fn check_previous_stack_items() {

        this.loop_stack_items(SELF.mark_on_stack)

        let stu = still_used
        let state = color_state

        let list = stack_items
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            let color = @ptrv(adr, uint, 1) @as color_type
            adr += sizeof(ptr) * 2

            let mark = @ptrv(item, u8, byte_mark_rel)

            if mark & mark_bit_on_stack == 0 {
                // Disable color
                @ptrv(state, u8, color) = color_state_unused
                let adr = return_colors.get(sizeof(color_type))
                @ptrv(adr, color_type) = color
                
            } else {
                // Re-add to list
                if @ptrv(state, u8, color) == color_state_used {
                    @ptrv(data, ptr) = item
                    @ptrv(data, uint, 1) = color
                    data += sizeof(ptr) * 2
                } else {
                    let adr = return_colors.get(sizeof(color_type))
                    @ptrv(adr, color_type) = color
                }
            }
        }

        list.index = data - list.data

        this.loop_stack_items(SELF.mark_off_stack)
    }

    static fn mark_on_stack(item: ptr) {
        @ptrv(item, u8, byte_mark_rel) = @ptrv(item, u8, byte_mark_rel) | mark_bit_on_stack
    }
    static fn mark_off_stack(item: ptr) {
        @ptrv(item, u8, byte_mark_rel) = @ptrv(item, u8, byte_mark_rel) & (255 - mark_bit_on_stack)
    }
    static fn mark_item_used(item: ptr) {

        let data = (@ptr_offset(item, -8)) @as GcData
        let mark = data.mark

        if mark & mark_bit_used == mark_bit_used : return

        mark_item_used(item)

        if mark & mark_bit_still_used == 0 {
            data.mark = data.mark | mark_bit_still_used
            let adr = still_used.get(sizeof(ptr))
            @ptrv(adr, ptr) = item
        }
    }

    static fn mark_item_color(item: ptr) {
        let color = @ptrv(item, color_type, byte_color_rel)
        if @ptrv(color_state, u8, color) == color_state_unused {

            let c = Color.get()
            color_disable_after = false

            mark_item(item, c)

            if color_disable_after {
                let adr = disable_colors.get(sizeof(color_type))
                @ptrv(adr, color_type) = c
            }

            let li = stack_items.get(sizeof(ptr) * 2)
            @ptrv(li, ptr) = item
            @ptrv(li, uint, 1) = c
        }
    }

    fn check_still_used() {

        let state = color_state
        let list = still_used
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            adr += sizeof(ptr)

            // Check mark
            let color = @ptrv(item, color_type, byte_color_rel)
            if @ptrv(state, u8, color) == color_state_unused {
                free(item)
            } else {
                // @ptrv(item, u8, byte_mark_rel) = @ptrv(item, u8, byte_mark_rel) & (255 - mark_bit_still_used)
                @ptrv(data, ptr) = item
                data += sizeof(ptr)
            }
        }

        list.index = data - list.data
        // still_used.reset()
    }

    fn check_blanks() {

        let list = blanks
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            adr += sizeof(ptr)
            free_blank(item)
        }
    }

    fn check_disable_colors() {
        let list = disable_colors
        let state = color_state

        let data = list.data
        let adr = data
        let end = adr + list.index
        while adr < end {
            let color = @ptrv(adr, color_type)
            adr += sizeof(color_type)
            @ptrv(state, u8, color) = color_state_unused
        }
    }

    fn check_return_colors() {
        let list = return_colors
        let state = color_state

        let data = list.data
        let adr = data
        let end = adr + list.index
        while adr < end {
            let color = @ptrv(adr, color_type)
            adr += sizeof(color_type)
            Color.give(color)
        }
    }

    ////////////////////
    ////////////////////

    fn loop_stack_items(handler: fn(ptr)()) {

        // Globals
        let g_adr = this.globals.data
        let g_end_adr = g_adr + this.globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ?ptr)
            if isset(item) {
                handler(item)
            }
            g_adr += sizeof(ptr)
        }

        // Stack
        let stack = stack_main
        let adr = stack.base
        let top = stack.adr
        while adr < top {
            let item = @ptrv(adr, ?ptr)
            if isset(item) {
                handler(item)
            }
            adr += sizeof(ptr)
        }

        let coro_data = coro:g_coros.data
        let coro_count = coro:g_coros.length
        while coro_count-- > 0 {
            let coro = @ptrv(coro_data, ?ptr, coro_count)
            if isset(coro) {
                let adr = (coro @as coro:Coro).stack.base
                let top = (coro @as coro:Coro).stack.adr
                while adr < top {
                    let item = @ptrv(adr, ?ptr)
                    if isset(item) {
                        handler(item)
                    }
                    adr += sizeof(ptr)
                }
            }
        }
    }

    + fn shutdown() {
        this.run()
        // TODO: pass blocks with shared memory to shared gc
    }
}

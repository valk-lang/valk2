
header "sys" as sys

use mem

class Mutex[T] {
	- mutex: ptr

	#if @is_void_type(T)

	static fn new() SELF { 
		#if OS == win
		let mut = 0 @as ptr
		#else
		let mut = mem:calloc(64)
		sys:pthread_mutex_init(mut, null)
		#end
		return SELF { mutex: mut }
	}

	fn lock() void {
		#if OS != win
		sys:pthread_mutex_lock(this.mutex)
		#end
	}

	fn unlock() void {
		#if OS != win
		sys:pthread_mutex_unlock(this.mutex)
		#end
	}

	#else
	- value: T

	static fn new(value: T) SELF { 
		let mut = null @as ptr
		let mut = mem:calloc(sys:CONST.mutex_size)
		sys:pthread_mutex_init(mut, null)
		return SELF { mutex: mut, value: value }
	}

	fn lock() T {
		sys:pthread_mutex_lock(this.mutex)
		return swap this.value with null
	}

	fn unlock(value: T) void {
		sys:pthread_mutex_unlock(this.mutex)
		this.value = value
	}

	#end

	fn _gc_free() void {
		#if OS != win
		sys:pthread_mutex_destroy(this.mutex)
		mem:free(this.mutex)
		#end
	}
}

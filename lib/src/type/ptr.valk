
use io
use mem
use core

pointer ptr {
    fn to_hex() String {
        return (this @as uint).to_hex()
    }

    fn _string() String {
        return (this @as uint).to_hex()
    }

    fn print() {
        (this @as uint).print(16)
    }

    fn print_content(length: uint) {
        io:print_from_ptr(this, length)
    }

    fn index_of_byte(byte: u8, memory_size: uint) uint !not_found {
        let index : uint = 0
        let len = memory_size
        while index < len {
            let ch = @ptrv(this, u8, index)
            if ch == byte : return index
            index++
        }
        throw not_found
    }

    fn create_string(length: uint) String {
        if length == 0 : return ""
        let str = String.make_empty(length)
        mem:copy(this, str.data_ptr(), length)
        return str
    }

    fn offset(offset: uint) ptr {
        return @ptr_offset(this, offset)
    }
    fn offset_int(offset: int) ptr {
        return @ptr_offset(this, offset)
    }

    fn print_stack_from_top(length: uint) {
        let i = 0
        let adr : ptr = this + length * sizeof(ptr)
        let until : ptr = this - 64
        while adr >= until {
            print("0x")
            adr.print()
            print(" => ")
            let v = @ptrv(adr, ptr)
            v.print()
            print(" | ")
            (v @as uint).print(10)
            print("\n")
            adr -= sizeof(ptr)
        }
    }
}
